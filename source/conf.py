# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
import numpy as np
import recommonmark
from recommonmark.transform import AutoStructify
import jieba # for chinese search engine
from docutils import nodes

# -- Project information -----------------------------------------------------

project = 'machine learning note'
copyright = '2019, Vivian LEE'
author = 'Vivian LEE'


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx_rtd_theme',
    'recommonmark',
    'sphinx.ext.autosectionlabel', # Auto-generate section labels.
    'sphinx_markdown_tables', # rendering markdown tables
#     'sphinx.ext.imgmath',
#     'sphinx.ext.mathjax',
]

# Prefix document path to section labels, otherwise autogenerated labels would look like 'heading'
# rather than 'path/to/file:heading'
autosectionlabel_prefix_document = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'ch_TW'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The master toctree document.
master_doc = 'index'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# -- CommonMark Markdown -----------------------------------------------------

source_suffix = ['.rst', '.md']

# -- LaTeX for formula -------------------------------------------------------
latex_engine = "xelatex"
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'
print(f'on_rtd {on_rtd}')
if on_rtd:
    latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    'preamble': r'''
    \hypersetup{unicode=true}
    \usepackage{CJKutf8}
    \DeclareUnicodeCharacter{00A0}{\nobreakspace}
    \DeclareUnicodeCharacter{2203}{\ensuremath{\exists}}
    \DeclareUnicodeCharacter{2200}{\ensuremath{\forall}}
    \DeclareUnicodeCharacter{2286}{\ensuremath{\subseteq}}
    \DeclareUnicodeCharacter{2713}{x}
    \DeclareUnicodeCharacter{27FA}{\ensuremath{\Longleftrightarrow}}
    \DeclareUnicodeCharacter{221A}{\ensuremath{\sqrt{}}}
    \DeclareUnicodeCharacter{221B}{\ensuremath{\sqrt[3]{}}}
    \DeclareUnicodeCharacter{2295}{\ensuremath{\oplus}}
    \DeclareUnicodeCharacter{2297}{\ensuremath{\otimes}}
    \begin{CJK}{UTF8}{gbsn}
    \AtEndDocument{\end{CJK}}
    ''',
    }
else:
    latex_elements = {
        'papersize': 'a4paper',
        'utf8extra': '',
        'inputenc': '',
        'cmappkg': '',
        'fontenc': '',
        'preamble': r'''
            \usepackage{xeCJK}
            \parindent 2em
            \setcounter{tocdepth}{3}
            \renewcommand\familydefault{\ttdefault}
            \renewcommand\CJKfamilydefault{\CJKrmdefault}
        ''',
    }
# -- Search -------------------------------------------------------------------
# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr', 'zh'
html_search_language = 'zh'

html_search_options = {'dict': jieba.DEFAULT_DICT}

class AutoStructifyPatch(AutoStructify):
    def parse_ref(self, ref):
        """
        Patch AutoStructify for relative path
        """
        title = None
        if len(ref.children) == 0:
            title = ref['name'] if 'name' in ref else None
        elif isinstance(ref.children[0], nodes.Text):
            title = ref.children[0].astext()
        uri = ref['refuri']
        if uri.find('://') != -1:
            return (title, uri, None)
        anchor = None
        arr = uri.split('#')
        if len(arr) == 2:
            anchor = arr[1]
        if len(arr) > 2 or len(arr[0]) == 0:
            return (title, uri, None)
        uri = arr[0]

        abspath = os.path.abspath(os.path.join(self.file_dir, uri))
        # ** Patch
        if uri[0] != '/': # input uri is relative path
            abspath = '/' + os.path.relpath(abspath, self.root_dir)
        relpath = os.path.relpath(abspath, self.root_dir)

        # use url resolver
        if self.url_resolver:
            uri = self.url_resolver(relpath)
        if anchor:
            uri += '#' + anchor
        return (title, uri, None)

def setup(app):
    app.add_config_value('recommonmark_config', {
            'enable_auto_toc_tree': True,
#             'auto_toc_tree_section': 'Contents',
            'auto_toc_maxdepth': 2, 
            'enable_math': True,
            'enable_inline_math': True,
            'enable_eval_rst': True,
            }, True)
    app.add_transform(AutoStructifyPatch) # replace AutoStructify to patch parse_ref
    app.add_stylesheet('css/style.css')